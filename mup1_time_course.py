# -*- coding: utf-8 -*-
"""mup1_time_course.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uBOc2remL_3oPT2xDC5wSbGGFTdJiwSo
"""

import numpy as np
from matplotlib import pyplot as plt
from scipy.integrate import solve_ivp

def model(states, t, Me, y, k, w, j, f, Ae, Ap, a, h, b, z, g, V, vmax, Km):
    """function to establish the system in the model

       Parameters:
       - y (ndarray): array of dependent variables (P, Pm, Pa, Pu, E, Em, Ea, Eu, M)
       - t (float): time
       - others (float): parameters for the equations (will be given values as we find them)

       Returns:
       - array: vector of derivatives at time t
    """
    # unpack the variables (for readability)
    P, Pm, Pa, Pu, E, Em, Ea, Eu, M = states

    # set up the equations
    dy = [
        y - k*Me*P - (k/w)*M*P + j*Pm + f*(Ae/Ap)*E,                      # P
        k*Me*P + (k/w)*M*P - j*Pm - h*Pm,                                 # Pm
        h*Pm - a*Pa,                                                      # Pa
        a*Pa - g*(Ap/Ae)*Pu - b*Pu,                                       # Pu
        b*(Ap/Ae)*Pu - f*(Ae/Ap)*E + b*Eu - (k/w)*E*M + j*Em,             # E
        (k/w)*E*M - h*Em - j*Em,                                          # Em
        h*Em - a*Ea,                                                      # Ea
        - b*Eu + a*Ea - z*Eu,                                             # Eu
        -(k/w)*M*(E+P) + (j + a)*(Em + Pm) - (vmax*M)/(V*(Km + M))        # M
    ]

    return dy

# parameters (filled in the ones I think would be the same or similar to Fur4)
y = 8.3e-5 #'' # units mup1 per millisecond (mup1 production rate)
k = 135 #'' # per micromolar per millisecond (methionine binding rate)
w = 32 # unitless (scale factor for pH difference)
j = 100 #'' # per millisecond (methionine unbinding rate)
f = .25 #'' # per millisecond (recycling rate)
Ae = 47 # micrometers^3 (endosomal membrane surface area)
Ap = 314 # micrometers^3 (plasma membrane surface area)
a = 1 # per millisecond (ubiquitination rate)
h = 135 #'' # per micromolar per millisecond (art 1 binding rate)
b = 1 # per millisecond (deubiquitination rate)
z = .002 #'' # per millisecond (degradation rate)
g = 0.1 #'' # per millisecond (endocytosis rate)
V = 523 # micrometers^3 (volume of cytoplasm)
vmax = 8.8e3 #'' # micromolars*micrometers^3 per millisecond (maximal rate of methionine metabolism)
Km = 2.5 #'' # micromolars (methionine michaelis-menten constant)

# methionine (changes)
Me = 0.1

if __name__ == '__main__':
    # establish initial conditions
    initial = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
    range = 200
    times = np.linspace(0, range, 200)

    # solve using solve_ivp
    system = lambda t, states: model(states, t, Me, y, k, w, j, f, Ae, Ap, a, h, b, z, g, V, vmax, Km)
    solution = solve_ivp(system, [times[0], times[-1]], initial, t_eval=times)

    P, P_m, P_a, P_u, E, E_m, E_a, E_u, M = solution.y

    plt.plot(times, P, label = 'P', color = 'b')
    plt.plot(times, P_m, label = 'Pm')
    plt.plot(times, P_a, label = 'Pa')
    plt.plot(times, P_u, label = 'Pu')
    plt.plot(times, E, label = 'E', color = 'r')
    plt.plot(times, E_m, label = 'Em')
    plt.plot(times, E_a, label = 'Ea')
    plt.plot(times, E_u, label = 'Eu')
    plt.plot(times, M, label = 'M', color = 'g')

    # New initial conditions
    initial = [P[199], P_m[199], P_a[199], P_u[199], E[199], E_m[199], E_a[199], E_u[199], M[199]]
    new_range = range * 4
    new_times = np.linspace(range, new_range, 200)
    Me = 0

    # Solve again
    solution2 = solve_ivp(system, [new_times[0], new_times[-1]], initial, t_eval=new_times)

    P, P_m, P_a, P_u, E, E_m, E_a, E_u, M = solution2.y

    plt.plot(new_times, P, color = 'b')
    plt.plot(new_times, P_m)
    plt.plot(new_times, P_a)
    plt.plot(new_times, P_u)
    plt.plot(new_times, E, color = 'r')
    plt.plot(new_times, E_m)
    plt.plot(new_times, E_a)
    plt.plot(new_times, E_u)
    plt.plot(new_times, M, color = 'g')

    plt.xlabel('Time')
    plt.ylabel('y(t)')
    plt.title(f'Solution of the System of ODEs')
    plt.legend()
    plt.show()